#include <ESP8266WiFi.h>        // Include the Wi-Fi library
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>


using namespace std;

//const char* ssid     = "SSID";         // The SSID (name) of the Wi-Fi network you want to connect to
//const char* password = "PASSWORD";     // The password of the Wi-Fi network
const char* ssid     = "EXETEL B31980 2.4G"; // does not work on 5G network
const char* password = "6jqCKz5Y";

//const char* url = "https://maker.ifttt.com/trigger/tank_level/json/with/key/ptJbZEpqEFQaB5ZwcLwwBBAJ6KhmVoqpiGvrxModLOp?value1=value1";
//const char* URL = "https://maker.ifttt.com/trigger/tank_level/with/key/ptJbZEpqEFQaB5ZwcLwwBBAJ6KhmVoqpiGvrxModLOp?value1=value1";
const char* url = "https://maker.ifttt.com/trigger/tank_level/with/key/ptJbZEpqEFQaB5ZwcLwwBBAJ6KhmVoqpiGvrxModLOp";


void setup() {
  Serial.begin(115200);         // Start the Serial communication to send messages to the computer
  delay(10000);
  Serial.println("in setup()");
  
  WiFi.begin(ssid, password);             // Connect to the network
  Serial.print("Connecting to ");
  Serial.print(ssid); Serial.println(" ...");

  int i = 0;
  while (WiFi.status() != WL_CONNECTED) { // Wait for the Wi-Fi to connect
    delay(1000);
    Serial.print(++i); Serial.print(' ');
  }

  Serial.println('\n');
  Serial.println("Connection established!");  
  Serial.print("IP address:\t");
  Serial.println(WiFi.localIP());         // Send the IP address of the ESP8266 to the computer


	WiFiClient client;
	HTTPClient http;
	Serial.print("[HTTP] begin...\n");
    // configure traged server and url
	http.begin(client, url);  // HTTP
	//	http.begin(client, "http://maker.ifttt.com/tank_level/");  // HTTP
    http.addHeader("Content-Type", "application/json");

    Serial.print("[HTTP] POST...\n");
    // start connection and send HTTP header and body
//    int httpCode = http.POST("{\"hello\":\"world\"}");
		int httpCode = http.POST("{\"value1\":\"042\"}");

    // httpCode will be negative on error
    if (httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      Serial.printf("[HTTP] POST... code: %d\n", httpCode);

      // file found at server
      if (httpCode == HTTP_CODE_OK) {
        const String& payload = http.getString();
        Serial.println("received payload:\n<<");
        Serial.println(payload);
        Serial.println(">>");
      }
    } else {
      Serial.printf("[HTTP] POST... failed, error: %s\n", http.errorToString(httpCode).c_str());
    }

    http.end();
		
	 // Maker/IFTTT expect something literally called "value1"
	/* doc["value1"] = 101; */


	/*  //send vars, first convert to string, then POST out.  */
  /*   serializeJson(doc, (char*) msg_buffer, 300);  */
    
  /*   Serial.println(msg_buffer); */
    
  /*   HTTPClient http; */
	/* 	WiFiClient client; */

  /*   http.begin(client, url); */
  /*   http.addHeader("Content-Type", "application/json"); //tell server it is json */
  /*   int r = http.POST(msg_buffer); */
    
  /*   if (r < 0){ */

  /*     Serial.println(http.errorToString(r)); */

  /*   }else{ */

  /*     http.writeToStream(&Serial); //write response back to serial,  */

  /*   } */

  /*   http.end(); */
  /*   Serial.printf("\n[%d] status code\n\n", r); */

    delay(60000);

		
	 /* 	//Serial.println("looping"); */
	 /* WiFiClient client; */
	 /* // connect to the Maker event server */
	 /* /\* const char* server = "maker.ifttt.com"; *\/ */
	 /* /\* const char* resource = "https://maker.ifttt.com/trigger/ESP_MotionSMS/with/key/ptJbZEpqEFQaB5ZwcLwwBBAJ6KhmVoqpiGvrxModLOp"; *\/ */
	 /* /\* const int httpPort = 80; *\/ */
	 /* /\* const char* server = "maker.ifttt.com";                                *\/ */
	 /* /\* const char* resource = "https://maker.ifttt.com/trigger/tank_level/json/with/key/ptJbZEpqEFQaB5ZwcLwwBBAJ6KhmVoqpiGvrxModLOp?value1=value1";                           *\/ */
	 /* /\* const int httpPort = 80;                      *\/ */
	 /* const char* apiKey = "ptJbZEpqEFQaB5ZwcLwwBBAJ6KhmVoqpiGvrxModLOp"; */
	 /* String makerEvent = "tank_level"; */
	 /* const char* server = "maker.ifttt.com"; */
	 /* const int httpPort = 80; */
	 
	 /* if (!client.connect(server, httpPort)){ */
	 /* 	 Serial.println("Connection failed to ifttt server"); */
	 /* 	 return; */
	 /* } */
	 /* else{ */
	 /* 	 Serial.println("Connected to ifttt server"); */
	 /* } */
	 

	 /* /// WORKS: */
	 /* //char data[] = "value1=101"; */
	 /* //no wrks: string data = "value1=101"; */
	 /* String data = "value1=0"; */
	 /* int value = 42; */
	 /* String value2str = String(value); */
	 /* data = data + value2str; */

	 /* Serial.print("Sending data value to ifttt server, data="); */
	 /* Serial.println(data); */

	 /* String url = "/trigger/" + makerEvent + "/with/key/"; */
	 /* url += apiKey; */
                                                                                     
	 /* client.println(String("POST ") + url + " HTTP/1.1"); */
	 /* client.println(String("Host: ") + server); */
	 /* client.println(String("Content-Type: application/x-www-form-urlencoded")); */
	 /* client.print(String("Content-Length: ")); */
	 /* client.println(sizeof(data)); */
	 /* client.println(); */
	 /* client.println(data); */

	 /* //delay(10000); */
	 /* client.stop(); */

	 Serial.print("end setup()");
}


void loop(){

	

}
